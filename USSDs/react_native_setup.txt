# USSD CODE MANAGER - REACT NATIVE SETUP GUIDE


## PROJECT INITIALIZATION

### Setting Up a New Project
```bash
# Using React Native CLI
npx react-native init USSDCodeManager --template react-native-template-typescript

# Using Expo (easier for beginners)
npx create-expo-app USSDCodeManager --template typescript
```

## ESSENTIAL PACKAGES FOR USSD APP

### Navigation
1. **React Navigation**
   ```bash
   npm install @react-navigation/native
   npm install @react-navigation/bottom-tabs @react-navigation/stack @react-navigation/material-top-tabs
   npm install react-native-screens react-native-safe-area-context
   ```

### UI Components
2. **UI Component Library** (choose one)
   ```bash
   # React Native Paper (Material Design)
   npm install react-native-paper


### State Management
3. **Redux Toolkit** or **Context API**
   ```bash
   # Redux Toolkit
   npm install @reduxjs/toolkit react-redux

   # For async operations
   npm install redux-thunk
   ```

### Storage
4. **AsyncStorage** or **SQLite**
   ```bash
   # AsyncStorage
   npm install @react-native-async-storage/async-storage

   # SQLite
   npm install react-native-sqlite-storage
   ```

### USSD Integration
5. **USSD Code Handling**
   ```bash
   # For direct USSD execution (requires permissions)
   npm install react-native-direct-call
   npm install react-native-phone-call
   
   # For SMS and phone features
   npm install react-native-sms
   npm install react-native-communications
   ```

### Location Services
6. **Geolocation**
   ```bash
   npm install react-native-geolocation-service
   npm install @react-native-community/geolocation
   ```

### Form Handling
7. **Form Management**
   ```bash
   npm install react-hook-form
   npm install yup
   ```

### Animations
8. **Animation Libraries**
   ```bash
   npm install react-native-reanimated
   npm install react-native-gesture-handler
   npm install lottie-react-native
   ```

### Utilities
9. **Utility Libraries**
   ```bash
   npm install lodash
   npm install moment
   npm install react-native-device-info
   ```

### Icons and Graphics
10. **Icon Libraries**
    ```bash
    npm install react-native-vector-icons
    npm install @expo/vector-icons (if using Expo)
    ```

### Permissions
11. **Permission Handling**
    ```bash
    npm install react-native-permissions
    ```

### QR Code/Barcode
12. **QR Code Scanning** (for sharing USSD codes)
    ```bash
    npm install react-native-camera
    npm install react-native-qrcode-scanner
    ```

### Internationalization
13. **i18n Support**
    ```bash
    npm install i18next react-i18next
    ```

## FOLDER STRUCTURE

Create this folder structure within your project:

```
/src
  /assets
    /images
    /fonts
    /animations
  /components
    /common
      Button.tsx
      Card.tsx
      CodeDisplay.tsx
      Input.tsx
      ...
    /layouts
      Header.tsx
      Footer.tsx
      TabBar.tsx
      ...
  /screens
    /home
      Dashboard.tsx
      QuickAccess.tsx
      ...
    /categories
      CategoryList.tsx
      CategoryDetail.tsx
      ...
    /codes
      CodeList.tsx
      CodeDetail.tsx
      CodeExecutor.tsx
      ...
    /emergency
      EmergencyServices.tsx
      ...
    /settings
      SettingsScreen.tsx
      ThemeSetting.tsx
      ...
  /navigation
    AppNavigator.tsx
    TabNavigator.tsx
    StackNavigator.tsx
    ...
  /store
    /slices
      codeSlice.ts
      userSlice.ts
      ...
    store.ts
    hooks.ts
  /services
    ussdService.ts
    locationService.ts
    ...
  /utils
    constants.ts
    helpers.ts
    validators.ts
    ...
  /hooks
    useCodeExecution.ts
    useCarrierDetection.ts
    ...
  /types
    index.ts
    models.ts
    ...
  /theme
    colors.ts
    typography.ts
    spacing.ts
    ...
  /localization
    i18n.ts
    /translations
      en.json
      fr.json
      ...
  App.tsx
```

## CONFIGURATION FILES

### Basic TypeScript Configuration
Create a `tsconfig.json` in your project root:

```json
{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "react-native",
    "lib": ["es2017"],
    "moduleResolution": "node",
    "noEmit": true,
    "strict": true,
    "target": "esnext",
    "baseUrl": "./src",
    "paths": {
      "@components/*": ["components/*"],
      "@screens/*": ["screens/*"],
      "@navigation/*": ["navigation/*"],
      "@store/*": ["store/*"],
      "@services/*": ["services/*"],
      "@utils/*": ["utils/*"],
      "@hooks/*": ["hooks/*"],
      "@types/*": ["types/*"],
      "@theme/*": ["theme/*"],
      "@assets/*": ["assets/*"]
    }
  },
  "exclude": [
    "node_modules",
    "babel.config.js",
    "metro.config.js"
  ]
}
```

### Babel Configuration
Update your `babel.config.js`:

```javascript
module.exports = {
  presets: ['module:metro-react-native-babel-preset'],
  plugins: [
    [
      'module-resolver',
      {
        root: ['./src'],
        extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],
        alias: {
          '@components': './src/components',
          '@screens': './src/screens',
          '@navigation': './src/navigation',
          '@store': './src/store',
          '@services': './src/services',
          '@utils': './src/utils',
          '@hooks': './src/hooks',
          '@types': './src/types',
          '@theme': './src/theme',
          '@assets': './src/assets'
        }
      }
    ],
    'react-native-reanimated/plugin'
  ]
};
```

## ESSENTIAL CODE SETUP EXAMPLES

### 1. Theme Setup (src/theme/colors.ts)
```typescript
export const lightColors = {
  primary: '#34729C',
  secondary: '#4C6DF0',
  background: '#FFFFFF',
  card: '#F0F5FA',
  text: '#1A2237',
  border: '#E4ECF4',
  success: '#23A86D',
  warning: '#F9A826',
  error: '#E63946',
  // ... other colors
};

export const darkColors = {
  primary: '#5E99C2',
  secondary: '#7990F5',
  background: '#121820',
  card: '#1D2733',
  text: '#ECF2F8',
  border: '#2D3A4A',
  success: '#4CC38A',
  warning: '#FFBB50',
  error: '#F27285',
  // ... other colors
};
```

### 2. Navigation Setup (src/navigation/AppNavigator.tsx)
```typescript
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createStackNavigator } from '@react-navigation/stack';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';

import HomeScreen from '@screens/home/Dashboard';
import CategoriesScreen from '@screens/categories/CategoryList';
import CodeExecutorScreen from '@screens/codes/CodeExecutor';
import ProfileScreen from '@screens/settings/SettingsScreen';

const Tab = createBottomTabNavigator();
const Stack = createStackNavigator();

const TabNavigator = () => {
  return (
    <Tab.Navigator>
      <Tab.Screen
        name="Home"
        component={HomeScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Icon name="home" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Categories"
        component={CategoriesScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Icon name="folder" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Execute"
        component={CodeExecutorScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Icon name="play-circle" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={ProfileScreen}
        options={{
          tabBarIcon: ({ color, size }) => (
            <Icon name="account" color={color} size={size} />
          ),
        }}
      />
    </Tab.Navigator>
  );
};

const AppNavigator = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator>
        <Stack.Screen
          name="Main"
          component={TabNavigator}
          options={{ headerShown: false }}
        />
        {/* Other screens would be added here */}
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default AppNavigator;
```

### 3. Basic Redux Store Setup (src/store/store.ts)
```typescript
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './slices/userSlice';
import codeReducer from './slices/codeSlice';

export const store = configureStore({
  reducer: {
    user: userReducer,
    codes: codeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
```

### 4. USSD Code Service (src/services/ussdService.ts)
```typescript
import { Platform, Linking } from 'react-native';
import call from 'react-native-phone-call';

interface ExecuteParams {
  code: string;
  parameters?: Record<string, string>;
}

export const executeUSSDCode = async ({
  code,
  parameters = {},
}: ExecuteParams): Promise<boolean> => {
  try {
    // Replace parameters in code
    let finalCode = code;
    Object.entries(parameters).forEach(([key, value]) => {
      finalCode = finalCode.replace(`{${key}}`, value);
    });
    
    // Format the USSD code for dialing
    finalCode = finalCode.replace(/\*/g, '*').replace(/#/g, '%23');
    
    // Different handling for Android and iOS
    if (Platform.OS === 'android') {
      // Android uses tel: URI with direct USSD code
      const formattedCode = `tel:${finalCode}`;
      await Linking.openURL(formattedCode);
      return true;
    } else {
      // iOS can use the call function
      const args = {
        number: finalCode,
        prompt: false,
      };
      call(args).catch(console.error);
      return true;
    }
  } catch (error) {
    console.error('Error executing USSD code:', error);
    return false;
  }
};

export const saveCodeToHistory = (code: string, result: string) => {
  // Implementation to save executed code to history
};

export const addToFavorites = (codeId: string) => {
  // Implementation to add code to favorites
};
```

## RUNNING THE APP

### Development Build
```bash
# For Android
npx react-native run-android

# For iOS
npx react-native run-ios

# Using Expo
npx expo start
```

### Production Build
```bash
# For Android
cd android
./gradlew assembleRelease

# For iOS (requires Xcode)
# Use Xcode to archive and distribute
```

## NEXT STEPS

1. Set up the basic project structure
2. Install core dependencies
3. Configure navigation and theme
4. Create reusable UI components
5. Implement the USSD code database
6. Build the code execution service
7. Implement user preferences and storage
8. Add location-based services for emergency codes
9. Test on different devices and with different carriers
10. Prepare for app store submission
